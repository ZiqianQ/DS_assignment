package Client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.Socket;
import java.net.UnknownHostException;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.sun.javafx.stage.WindowCloseRequestHandler;
import com.sun.org.apache.regexp.internal.recompile;
import com.sun.xml.internal.bind.v2.runtime.unmarshaller.Receiver;

import java.util.Arrays;
import java.util.Scanner;;

public class Client {

	//aaron domain: sunrise.cis.unimelb.edu.au:3780 ip:128.250.22.135
	private static String ip = "sunrise.cis.unimelb.edu.au";
	private static int port = 3780;
	
	
	public static void main(String[] args) throws ParseException {
		// TODO Auto-generated method stub
		Boolean status = true; 
		String arg = "";
		while (status) {
			System.out.println("Please enter your command (hint:{query,fetch,publish,remove,exchang,}q to quit): ");
			Scanner scanner = new Scanner(System.in);
			arg = scanner.nextLine();
			switch (arg.toLowerCase()) {
			case "query":
				System.out.println("Command: "+arg.toUpperCase());
				Query();
				break;
			case "fetch":
				System.out.println("Command: "+arg.toUpperCase());
				Fetch();
				break;
			case "publish":
				System.out.println("Command: "+arg.toUpperCase());
				Publish();
				break;
			case "remove":
				System.out.println("Command: "+arg.toUpperCase());
				Remove();
				break;
			case "exchange":
				System.out.println("Command: "+arg.toUpperCase());
				Exchange();
				break;
			case "q":
				status = false;
				break;
			default:
				System.out.println("Command: "+arg.toUpperCase());
				System.out.println("Wrong command!!!");
				break;
			}	
		}	
}

	public static void  Remove() {
		 try(Socket socket = new Socket(ip,port)){
				//output stream
				DataOutputStream output = new DataOutputStream(socket.getOutputStream());
				//input stream
				DataInputStream input = new DataInputStream(socket.getInputStream());
				
				//QUERY function
				JSONObject newconmmand = new JSONObject();
				newconmmand.put("command", "REMOVE");
				
				JSONArray tag = new JSONArray();
				JSONObject template = new JSONObject();
				template.put("name", "");
				template.put("tags", tag);
				template.put("description", "");
				template.put("uri", "http://baidu.com");
				template.put("channel", "");
				template.put("owner", "mike");
				template.put("ezserver", null);
				
				newconmmand.put("resource", template);
				
				//print jsonobject
				System.out.println(newconmmand.toJSONString());
				
				//send command to server
				output.writeUTF(newconmmand.toJSONString());
				output.flush();
				//read from server and print out
							while(true){
					if (input.available()>0) {
						String result = input.readUTF();
						System.out.println("[REVEIVED FROM SERVER]: "+result);
					}
				}
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} 

	
private static void Publish() {
	try(Socket socket = new Socket(ip,port)){
		//output stream
		DataOutputStream output = new DataOutputStream(socket.getOutputStream());
		//input stream
		DataInputStream input = new DataInputStream(socket.getInputStream());
		
		//QUERY function
		JSONObject newconmmand = new JSONObject();
		newconmmand.put("command", "PUBLISH");
		
		JSONArray tag = new JSONArray();
		tag.add("test");
		tag.add("pulish");
		JSONObject template = new JSONObject();
		template.put("name", "AS WE CAN");
		template.put("tags", tag);
		template.put("description", "The testing of AS WE CAN");
		template.put("uri", "http://baidu.com");
		template.put("channel", "");
		template.put("owner", "mike");
		template.put("ezserver", null);
		
		newconmmand.put("resource", template);
		
		//print jsonobject
		System.out.println(newconmmand.toJSONString());
		
		//send command to server
		output.writeUTF(newconmmand.toJSONString());
		output.flush();
		//read from server and print out
					while(true){
			if (input.available()>0) {
				String result = input.readUTF();
				System.out.println("[REVEIVED FROM SERVER]: "+result);
			}
		}
	} catch (UnknownHostException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
}


	/*
public static void  Share() {
		 try(Socket socket = new Socket(ip,port)){
				//output stream
				DataOutputStream output = new DataOutputStream(socket.getOutputStream());
				//input stream
				DataInputStream input = new DataInputStream(socket.getInputStream());
				
				//QUERY function
				JSONObject newconmmand = new JSONObject();
				newconmmand.put("command", "SHARE");
				newconmmand.put("secret", "aswecan");
				
				JSONArray tag = new JSONArray();
				tag.add("picture");
				
				JSONObject template = new JSONObject();
				template.put("name", "123.jpg");
				template.put("tags", tag);
				template.put("description", "");
				//the uri should point to a file
				template.put("uri", "http://baidu.com");
				template.put("channel", "");
				template.put("owner", "mike");
				template.put("ezserver", null);
				
				newconmmand.put("resource", template);
				
				//print jsonobject
				System.out.println(newconmmand.toJSONString());
				
				//send command to server
				output.writeUTF(newconmmand.toJSONString());
				output.flush();
				//read from server and print out
							while(true){
					if (input.available()>0) {
						String result = input.readUTF();
						System.out.println("[REVEIVED FROM SERVER]: "+result);
					}
				}
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} 
*/
	

private static void Exchange() {
	try(Socket socket = new Socket(ip,port)){
		//output stream
		DataOutputStream output = new DataOutputStream(socket.getOutputStream());
		//input stream
		DataInputStream input = new DataInputStream(socket.getInputStream());
		
		//QUERY function
		JSONObject newconmmand = new JSONObject();
		newconmmand.put("command", "EXCHANGE");
		
		JSONObject host1 = new JSONObject();
		JSONObject host2 = new JSONObject();
		//host name one
		host1.put("hostname", "192.168.1.1");
		host1.put("port", 3000);
		//host name two
		host2.put("hostname", "192.168.0.1");
		host2.put("port", 3000);

		JSONArray list = new JSONArray();
		list.add(host1);
		list.add(host2);

		newconmmand.put("serverList", list);
		
		//print jsonobject
		System.out.println(newconmmand.toJSONString());
		
		//send command to server
		output.writeUTF(newconmmand.toJSONString());
		output.flush();
		//read from server and print out
					while(true){
			if (input.available()>0) {
				String result = input.readUTF();
				System.out.println("[REVEIVED FROM SERVER]: "+result);
			}
		}
	} catch (UnknownHostException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
}


private static void Fetch() throws ParseException {
	 try(Socket socket = new Socket(ip, port);){
			// Output and Input Stream
			DataInputStream input = new DataInputStream(socket.getInputStream());
		    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
			   
		    
			JSONObject newCommand = new JSONObject();
	 		newCommand.put("command", "FETCH");
	 		
	 		JSONObject resourceTemplate = new JSONObject();
	 		resourceTemplate.put("name","");
	 		JSONArray tag = new JSONArray();
	 		resourceTemplate.put("tags",tag );
	 		resourceTemplate.put("description","");
	 		resourceTemplate.put("uri","file:///usr/local/share/ezshare/photo.jpg");
	 		resourceTemplate.put("channel","");
	 		resourceTemplate.put("owner","");
	 		resourceTemplate.put("ezserver","sunrise.cis.unimelb.edu.au:3780");
	 		newCommand.put("resourceTemplate",resourceTemplate);  
	
	 		System.out.println(newCommand.toJSONString());
	 		
	 		// Send RMI to Server
	 		output.writeUTF(newCommand.toJSONString());
	 		output.flush();
	 		JSONParser parser = new JSONParser();
	 		// Print out results received from server..
	 		while (true){
	 			if(input.available() > 0){
	 				String result = input.readUTF();
	 				System.out.println("SERVER RESPONSE: "+result);
	 				JSONObject command = (JSONObject) parser.parse(result);
	 				if(command.containsKey("uri")){
	 					System.out.println(command.get("uri"));
	 					// The file location
							String fileName = "client_files/"+command.get("name");
							// Create a RandomAccessFile to read and write the output file.
							RandomAccessFile downloadingFile = new RandomAccessFile(fileName, "rw");
							// Find out how much size is remaining to get from the server.
							long fileSizeRemaining = (Long) command.get("resourceSize");
							int chunkSize = setChunkSize(fileSizeRemaining);
							
							// Represents the receiving buffer
							byte[] receiveBuffer = new byte[chunkSize];
							// Variable used to read if there are remaining size left to read.
							int num;
							System.out.println("Downloading "+fileName+" of size "+fileSizeRemaining);
							while((num=input.read(receiveBuffer))>0){
								// Write the received bytes into the RandomAccessFile
								downloadingFile.write(Arrays.copyOf(receiveBuffer, num));
								
								// Reduce the file size left to read..
								fileSizeRemaining-=num;
								
								// Set the chunkSize again
								chunkSize = setChunkSize(fileSizeRemaining);
								receiveBuffer = new byte[chunkSize];
								
								// If you're done then break
								if(fileSizeRemaining==0){
									break;
								}
							}
							System.out.println("File received!");
							downloadingFile.close();
	 				}
	 			}
	 		}
			
		}catch (IOException e) {		
	}
}


private static int setChunkSize(long fileSizeRemaining) {
	// determine the chunksize
	int chunkSize = 1024*1024;
	//if the file size remaining is less than chunksize reset it
	if (fileSizeRemaining<chunkSize) {
		chunkSize=(int) fileSizeRemaining;
	}
	return chunkSize;
}


public static void  Query() {
	 try(Socket socket = new Socket(ip,port)){
			//output stream
			DataOutputStream output = new DataOutputStream(socket.getOutputStream());
			//input stream
			DataInputStream input = new DataInputStream(socket.getInputStream());
			
			//QUERY function
			JSONObject newconmmand = new JSONObject();
			newconmmand.put("command", "QUERY");
			newconmmand.put("relay", false);
			
			JSONArray tag = new JSONArray();
			JSONObject template = new JSONObject();
			template.put("name", "");
			template.put("tags", tag);
			template.put("description", "");
			template.put("uri", "");
			template.put("channel", "");
			template.put("owner", "");
			template.put("ezserver", null);
			
			newconmmand.put("resourceTemplate", template);
			
			//print jsonobject
			System.out.println(newconmmand.toJSONString());
			
			//send command to server
			output.writeUTF(newconmmand.toJSONString());
			output.flush();
			//read from server and print out
						while(true){
				if (input.available()>0) {
					String result = input.readUTF();
					System.out.println("[REVEIVED FROM SERVER]: "+result);
				}
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	} 
}
