package Server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.ServerSocket;
import javax.net.ServerSocketFactory;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.sun.xml.internal.bind.v2.runtime.unmarshaller.Receiver;



public class Server {

	private static int port = 3000;

	
	
	public static void main(String[] args) {
		
		CommandLineParser parser = new BasicParser();
		Options options = new Options();
		
		//command line argument
		options.addOption("advertisedhostname", true, "advertised hostname");
		options.addOption("connectionintervallimit", true, "connection interval limit in seconds");
		options.addOption("exchangeinterval", true, "exchange interval in seconds");;
		options.addOption("port", true, "server port, an integer");
		options.addOption("sevret", true, "secret");
		options.addOption("debug", false, "print debug information");
		
		ServerSocketFactory factory = ServerSocketFactory.getDefault();
		try(ServerSocket server = factory.createServerSocket(port)){
			System.out.println("waiting for connection");
			
			//wait for connection
			while(true){
				
				Socket client = server.accept();
				
				Thread t = new Thread(() ->serverClient(client));
				t.start();
			}
						
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	private static void serverClient(Socket client){
		try(Socket clientServer = client){
			
			//Input stream
			DataInputStream input = new DataInputStream(client.getInputStream());
			
			//Output steam
			DataOutputStream output = new DataOutputStream(client.getOutputStream());
			
			//json parser
			JSONParser parser = new JSONParser();
			
			JSONObject received ; 
			JSONObject print = new JSONObject();
			String Receive;
			
			

		
			print.put("command","query");
			print.put("detailes", "noting");
			
			
			while (input.available()>0) {
				received = (JSONObject) parser.parse(input.readUTF());
				if (received.containsKey("command")) {
					if (received.get("command").toString().toLowerCase().equals("query")) {
						output.writeUTF(print.toJSONString());
						output.writeUTF((String) received.get("command"));
						output.flush();
					}
				}
			}
			
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (org.json.simple.parser.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
