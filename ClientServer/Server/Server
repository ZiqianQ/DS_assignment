package Server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Iterator;
import java.net.ServerSocket;
import javax.net.ServerSocketFactory;
import javax.print.attribute.standard.OutputDeviceAssigned;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.omg.CORBA.PUBLIC_MEMBER;

import com.sun.xml.internal.bind.v2.runtime.unmarshaller.Receiver;

import jdk.internal.dynalink.beans.StaticClass;
import jdk.nashorn.internal.runtime.StoredScript;



public class Server {

	private static int port = 3000;
	static JSONArray Store = new JSONArray();
	
	
	public static void main(String[] args) {
		
		CommandLineParser parser = new BasicParser();
		Options options = new Options();
		
		//command line argument
		options.addOption("advertisedhostname", true, "advertised hostname");
		options.addOption("connectionintervallimit", true, "connection interval limit in seconds");
		options.addOption("exchangeinterval", true, "exchange interval in seconds");;
		options.addOption("port", true, "server port, an integer");
		options.addOption("sevret", true, "secret");
		options.addOption("debug", false, "print debug information");
		
		ServerSocketFactory factory = ServerSocketFactory.getDefault();
		try(ServerSocket server = factory.createServerSocket(port)){
			System.out.println("waiting for connection");
			
			//wait for connection
			while(true){
				
				Socket client = server.accept();
				
				Thread t = new Thread(() ->serverClient(client));
				t.start();
			}
						
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	private static void serverClient(Socket client){
		try(Socket clientServer = client){
			
			//Input stream
			DataInputStream input = new DataInputStream(client.getInputStream());
			
			//Output steam
			DataOutputStream output = new DataOutputStream(client.getOutputStream());
			
			//json parser
			JSONParser parser = new JSONParser();
			
			JSONObject received ; 	
			//initial
			JSONObject initial = new JSONObject();
			initial.put("command", "startup");
			Store.add(initial);
			
			while (input.available()>0) {
				received = (JSONObject) parser.parse(input.readUTF());
				
//				System.out.println(received.toJSONString());
//				System.out.println(received.get("command").toString().toLowerCase());
				switch (received.get("command").toString().toLowerCase()) {
				case "query":
					Query(client);
					break;
				case "publish":
					Publish(client,received);
					break;
				default:
					JSONObject error = new JSONObject();
					error.put("response", "error");
					error.put("errorMessage", "invalid resourceTemplate");
					output.writeUTF(error.toJSONString());
					output.close();
					break;
				}
			}
	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (org.json.simple.parser.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void Query(Socket client) throws IOException{
		
		//Input stream
		DataInputStream input = new DataInputStream(client.getInputStream());
		
		//Output steam
		DataOutputStream output = new DataOutputStream(client.getOutputStream());
		//reveiced 
		JSONObject message = new JSONObject();
		message.put("response", "sucess");
		output.writeUTF(message.toJSONString());
//		output.close();
		//print the jsonArray
		for (Iterator iterator = Store.iterator();iterator.hasNext();) {
			output.writeUTF(((JSONObject)iterator.next()).toJSONString());
//			output.close();
		}
	}
	
	public static void Publish(Socket client, JSONObject received) throws IOException{
		
		//Input stream
		DataInputStream input = new DataInputStream(client.getInputStream());
		
		//Output steam
		DataOutputStream output = new DataOutputStream(client.getOutputStream());
		//stroe the json received from client to jsonArray
		Store.add(received);
		//reveiced 
		JSONObject message = new JSONObject();
		message.put("response", "sucess");
		output.writeUTF(message.toJSONString());
		output.close();
	}
}
